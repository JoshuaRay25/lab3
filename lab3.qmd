---
title: "Lab 3 - Josh Ray"
author: "Josh Ray"
date: "`r Sys.Date()`"
format:
  html:
    self-contained: true
---

# Question 1

```{r}
library(tidyverse)
library(flextable)
data = read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
my.date <- as.Date("2022-02-01")  
my.state <- "Colorado"
knitr::opts_chunk$set(
  message = FALSE, warning = FALSE,
  fig.width = 8, fig.height = 5
)
library(tidyverse)
library(flextable)
library(zoo)
library(sf)
library(ggplot2)
library(patchwork)
library(rnaturalearth)
library(rnaturalearthdata)
```

# Question 2

```{r}
nyt_url   <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-2022.csv"
covid_raw <- read_csv(nyt_url, col_types = cols(
  date   = col_date(),
  county = col_character(),
  state  = col_character(),
  fips   = col_character(),
  cases  = col_double(),
  deaths = col_double()
))
my.date  <- as.Date("2022-02-01")
my.state <- "Colorado"
colorado_covid <- covid_raw %>%
  filter(state == my.state) %>%
  group_by(county) %>%
  arrange(date) %>%
  mutate(
    new_cases  = cases  - lag(cases,  default = 0),
    new_deaths = deaths - lag(deaths, default = 0)
  ) %>%
  ungroup()
# Top 5 cumulative cases
cum5 <- colorado_covid %>%
  filter(date == my.date) %>%
  arrange(desc(cases)) %>%
  slice_head(n = 5) %>%
  select(County = county, Cumulative_Cases = cases)

flextable(cum5) %>%
  set_caption("Top 5 Colorado Counties by Cumulative COVID-19 Cases on 2022-02-01") %>%
  autofit()

# Top 5 new cases
new5 <- colorado_covid %>%
  filter(date == my.date) %>%
  arrange(desc(new_cases)) %>%
  slice_head(n = 5) %>%
  select(County = county, New_Cases = new_cases)

flextable(new5) %>%
  set_caption("Top 5 Colorado Counties by New COVID-19 Cases on 2022-02-01") %>%
  autofit()
```

# Question3/4

```{r}
library(tidyverse)  

pop_url <- "https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv"
pop_raw <- read_csv(pop_url, show_col_types = FALSE)

pop_co <- pop_raw %>%
  filter(STATE == 8, COUNTY != 0) %>%
  transmute(
    fips  = sprintf("%02d%03d", STATE, COUNTY),
    pop21 = POPESTIMATE2021
  )
covid_pop <- colorado_covid %>%
  left_join(pop_co, by = "fips")

covid_pop_day <- covid_pop %>%
  filter(date == my.date) %>%
  mutate(
    cases_pc     = cases     / pop21 * 1e5,
    new_cases_pc = new_cases / pop21 * 1e5
  )

# Top 5 cumulative per-capita
pc_cum5 <- covid_pop_day %>%
  arrange(desc(cases_pc)) %>%
  slice_head(n = 5) %>%
  select(County = county, Cases_per_100k = cases_pc)

flextable(pc_cum5) %>%
  set_caption("Top 5 CO Counties by Cumulative Cases per 100k on 2022-02-01") %>%
  autofit()

# Top 5 new per-capita
pc_new5 <- covid_pop_day %>%
  arrange(desc(new_cases_pc)) %>%
  slice_head(n = 5) %>%
  select(County = county, New_Cases_per_100k = new_cases_pc)

flextable(pc_new5) %>%
  set_caption("Top 5 CO Counties by New Cases per 100k on 2022-02-01") %>%
  autofit()
roll_14 <- colorado_covid %>%
  filter(date >= my.date - days(13), date <= my.date) %>%
  left_join(pop_co, by = "fips") %>%
  group_by(county, pop21) %>%
  summarise(
    cases_14    = sum(new_cases, na.rm = TRUE),
    cases_14_pc = cases_14 / pop21 * 1e5,
    .groups     = "drop"
  ) %>%
  arrange(desc(cases_14_pc))

flextable(
  roll_14 %>% slice_head(n = 5) %>% select(County = county, `14d per 100k` = cases_14_pc)
) %>%
  set_caption("Top 5 CO Counties by 14-Day New Cases per 100k") %>%
  autofit()

cat("Counties exceeding watch-list threshold (>100 new cases per 100k):", sum(roll_14$cases_14_pc > 100))
```

Top 5 counties in Colorado with the most cumulative cases per capita on 2022-02-01

```{r}
per_capita_county_summary <- covid_pop_day %>%
  arrange(desc(new_cases_pc)) %>%
  slice_head(n = 5) %>%
  select(
    county,
    total_new_cases_per_100k = new_cases_pc
  )
```

# Question6

```{r}
states <- c("New York", "Colorado", "Alabama", "Ohio")
state_covid <- covid_raw %>%
  filter(state %in% states) %>%
  group_by(state, date) %>%
  arrange(date) %>%
  mutate(new_cases = cases - lag(cases, default = 0)) %>%
  summarise(new_cases = sum(new_cases, na.rm = TRUE), .groups = "drop")

ggplot(state_covid, aes(x = date, y = new_cases)) +
  geom_col() +
  facet_wrap(~ state, scales = "free_y") +
  labs(
    title = "Daily New COVID-19 Cases by State",
    x = "Date", y = "New Cases"
  ) +
  theme_minimal()
```

Scaling by population allowed the data to be more accurately depicted in a per capita type of model, yes it makes larger population states look not as bad as they did before and it makes smaller population states with high cases per capita look worse.

# Question7

```{r}
centroids_url <- "https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/main/resources/county-centroids.csv"
centroids     <- read_csv(centroids_url, col_types = cols(
  fips = col_character(), LAT = col_double(), LON = col_double()
))

covid_geo <- covid_raw %>%
  filter(!is.na(fips)) %>%
  left_join(centroids, by = "fips")

wm_center <- covid_geo %>%
  group_by(date) %>%
  summarise(
    total_cases = sum(cases, na.rm = TRUE),
    wlat        = sum(LAT * cases, na.rm = TRUE) / total_cases,
    wlon        = sum(LON * cases, na.rm = TRUE) / total_cases
  ) %>%
  mutate(month = format(date, "%m"))

usa_states <- ne_states(country = "United States of America", returnclass = "sf")

ggplot(data = usa_states) +
  geom_sf(fill = "gray90", color = "white") +
  geom_point(
    data = wm_center,
    aes(x = wlon, y = wlat, size = total_cases, color = month),
    alpha = 0.7
  ) +
  scale_size_continuous(name = "Total Cases") +
  labs(title = "Weighted Mean Center of COVID-19 Cases Over Time") +
  theme_minimal()
```

I couldnt quite figure this one all out, but I know hot spots were originally in large cities then blew up in more rural areas later. This may have to do with larger cities having stricter covid protocols compared to rural areas.

# Question 8

```{r}
wm_deaths <- covid_geo %>%
  group_by(date) %>%
  summarise(
    total_deaths = sum(deaths, na.rm = TRUE),
    wlat_d       = sum(LAT * deaths, na.rm = TRUE) / total_deaths,
    wlon_d       = sum(LON * deaths, na.rm = TRUE) / total_deaths
  )

p_cases <- ggplot(wm_center, aes(wlon, wlat)) +
  geom_point(size = 2, alpha = 0.7, color = "red") +
  labs(title = "Weighted Mean Center of Cases") +
  coord_quickmap() +
  theme_minimal()

p_deaths <- ggplot(wm_deaths, aes(wlon_d, wlat_d)) +
  geom_point(size = 2, alpha = 0.7, color = "navy") +
  labs(title = "Weighted Mean Center of Deaths") +
  coord_quickmap() +
  theme_minimal()

p_cases + p_deaths + plot_layout(ncol = 2)
```
