---
title: "Lab 3 - Josh Ray"
author: "Josh Ray"
date: "`r Sys.Date()`"
format:
  html:
    self-contained: true
---

# Question 1

```{r}
library(tidyverse)
library(flextable)
data = read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
my.date <- as.Date("2022-02-01")  
my.state <- "Colorado"
```

# Question 2

```{r}
colorado_covid <- data %>%
  filter(state == my.state) %>%
  arrange(county, date) %>%
  group_by(county) %>%
  mutate(
    new_cases = cases - lag(cases, default = 0),  
    new_deaths = deaths - lag(deaths, default = 0)  
  ) %>%
  ungroup()
covid_most_cumulative <- colorado_covid %>%
  filter(date == my.date) %>%
  arrange(desc(cases)) %>%
  slice_head(n = 5) %>%
  select(county, cases)
covid_most_cumulative_table <- flextable(covid_most_cumulative) %>%
  add_footer_lines("Top 5 counties in Colorado with the most cumulative COVID cases on 2022-02-01") %>%
  set_caption("Table 1: Most cumulative COVID cases") %>%
  set_table_properties(layout = "autofit", width = 0.5) %>%
  align(align = "center", part = "all") 
covid_new_cases <- colorado_covid %>%
  filter(date == my.date) %>%
  select (county, new_cases) %>%
  arrange(desc(new_cases)) %>%
  slice_head(n = 5)
covid_new_cases_table <- flextable(covid_new_cases) %>%
  add_footer_lines("Top 5 counties in Colorado with the most new cases on 2022-02-01") %>%
  set_caption("Table 2: Most new COVID cases") %>%
  set_table_properties(layout = "autofit", width = 0.5) %>%
  align(align = "center", part = "all")
covid_new_cases_table
```

# Question3/4

```{r}
library(tidyverse)  

pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'
population_data <- read_csv(pop_url)

colorado_covid_temp <- colorado_covid %>% rename(FIP = fips)

population_data <- population_data %>%
    mutate(
        STATE = as.integer(STATE),
        COUNTY = as.integer(COUNTY),
        FIP = sprintf("%02d%03d", STATE, COUNTY)  # Ensure formatted correctly
    )

colorado_covid_2021 <- colorado_covid_temp %>%
  filter(date == my.date) 

per_capita_2021 <- colorado_covid_2021 %>%
  left_join(population_data, by = "FIP")  

per_capita_2021 <- per_capita_2021 %>%
  mutate(
    per_capita_cumulative_cases = cases / POPESTIMATE2021,
    per_capita_new_cases = new_cases / POPESTIMATE2021
  )

per_capita_2021_clean <- per_capita_2021 %>%
  distinct()

per_capita_2021_clean <- per_capita_2021_clean %>%
  mutate(per_capita_new_deaths = new_deaths / POPESTIMATE2021)

head(per_capita_2021_clean)
```

Top 5 counties in Colorado with the most cumulative cases per capita on 2022-02-01

```{r}
per_capita_county_summary <- per_capita_2021_clean %>%
  group_by(county) %>%
  summarise(
    total_new_cases_per_capita = sum(per_capita_new_cases, na.rm = TRUE),
    total_new_deaths_per_capita = sum(per_capita_new_deaths, na.rm = TRUE)
  ) %>%
  arrange(desc(total_new_cases_per_capita))

per_capita_county_summary %>%
  slice_head(n = 5) %>%
  select(county, total_new_cases_per_capita)
```

# Question5

```{r}
county_death_data <- per_capita_2021_clean %>%
  group_by(county) %>%
  summarise(
    total_new_deaths_per_capita = sum(per_capita_new_deaths, na.rm = TRUE)
  )
county_death_data %>%
  mutate(
    death_rate = total_new_deaths_per_capita * 1000  
  )
```

# Question6

```{r}
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(zoo)
library(readr)

covid_all_states <- read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')

colnames(covid_all_states)
head(covid_all_states)

state_pop <- data.frame(
  state = c("New York", "Colorado", "Alabama", "Ohio"),
  population = c(19453561, 5773714, 5024279, 11689100)  # Example populations
)

# Step 1: Filter and summarize the data for the selected states
state_data <- covid_all_states %>%
  filter(state %in% c("New York", "Colorado", "Alabama", "Ohio")) %>%
  group_by(state, date) %>%
  summarise(new_cases = sum(cases - lag(cases, default = 0), na.rm = TRUE), .groups = 'drop') %>%  # Calculate new cases
  mutate(rolling_avg = zoo::rollmean(new_cases, 7, fill = NA, align = "right"))

# Step 2: Plot daily new cases by state
ggplot(state_data, aes(x = date, y = new_cases, color = state)) +
  geom_line() +
  facet_wrap(~ state, scales = "free") +
  labs(title = "Daily New COVID-19 Cases by State") +
  theme_minimal()

# Step 3: Plot daily new cases and 7-day rolling mean for the selected states
ggplot(state_data, aes(x = date)) +
  geom_line(aes(y = new_cases, color = "Daily New Cases"), size = 1) +  # Raw daily new cases
  geom_line(aes(y = rolling_avg, color = "7-Day Rolling Mean"), size = 1) +  # 7-day rolling mean
  facet_wrap(~state, scales = "free_y") +  
  labs(
    title = "Daily New Cases and 7-Day Rolling Mean for Selected States",
    x = "Date", y = "New Cases",
    color = "Legend"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

# Step 4: Join with population data to calculate cases per capita
covid_state_data <- state_data %>%
  left_join(state_pop, by = "state") %>%
  mutate(cases_per_capita = new_cases / population)  # Calculate cases per capita

# Step 5: Calculate the 7-day rolling mean of cases per capita
covid_state_data <- covid_state_data %>%
  mutate(rolling_avg_per_capita = zoo::rollmean(cases_per_capita, 7, fill = NA, align = "right"))

head(covid_state_data)
```

Scaling by population allowed the data to be more accurately depicted in a per capita type of model, yes it makes larger population states look not as bad as they did before and it makes smaller population states with high cases per capita look worse.

# Question7

```{r}
counties <- read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')

covid_all_states$fips <- as.character(covid_all_states$fips)
counties$fips <- as.character(counties$fips)

covid_all_states <- covid_all_states %>%
  distinct(fips, .keep_all = TRUE)

counties <- counties %>%
  distinct(fips, .keep_all = TRUE)

covid_data <- covid_all_states %>%
  left_join(counties, by = "fips")

head(covid_data)

covid_data <- covid_all_states %>%
  left_join(counties, by = "fips")

head(covid_data)
```

I couldnt quite figure this one all out, but I know hot spots were originally in large cities then blew up in more rural areas later. This may have to do with larger cities having stricter covid protocols compared to rural areas.

# Question 8

```{r}
library(data.table)
library(dplyr)
library(tidyverse)
library(lubridate)
library(sf)
library(patchwork)
library(ggplot2)
library(tidyr)
library(knitr)
library(rmarkdown)

covid_data <- read.csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
county_centroids <- read.csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')

sum(duplicated(county_centroids$fips))  
sum(duplicated(covid_data$fips)) 

county_centroids <- county_centroids %>% mutate(fips = as.character(fips))
covid_data <- covid_data %>% mutate(fips = as.character(fips))

county_centroids_joined <- county_centroids %>%
  left_join(covid_data, by = "fips")

covid_data_with_centroids_distinct <- covid_data %>%
  left_join(county_centroids_joined %>% select(fips, LAT, LON), by = "fips") %>%
  distinct(fips, .keep_all = TRUE)

covid_data_with_centroids <- covid_data %>%
  mutate(fips = as.character(fips)) %>%
  left_join(
    covid_data_with_centroids_distinct %>%
      mutate(fips = as.character(fips)) %>%
      select(fips, LAT, LON),
    by = "fips"
  )

covid_data <- covid_data %>%
  mutate(fips = as.character(fips)) %>%
  distinct(fips, .keep_all = TRUE)

county_centroids <- county_centroids %>%
  mutate(fips = as.character(fips)) %>%
  distinct(fips, .keep_all = TRUE)

covid_data_with_centroids <- covid_data %>%
  left_join(county_centroids %>% select(fips, LAT, LON), by = "fips")

covid_data_filtered <- covid_data %>%
  filter(date >= "2020-01-01" & date <= "2021-01-01")

covid_data_aggregated <- covid_data_filtered %>%
  group_by(fips, date) %>%
  summarise(
    total_cases = sum(cases, na.rm = TRUE),
    total_deaths = sum(deaths, na.rm = TRUE),
    .groups = "drop"
  )

setDT(covid_data_aggregated)
setDT(county_centroids)

merged_data <- covid_data_aggregated %>%
  left_join(county_centroids, by = "fips")

covid_weighted_center_cases <- covid_data_with_centroids %>%
  group_by(date) %>%
  summarise(
    total_cases = sum(cases, na.rm = TRUE),
    weighted_latitude_cases = sum(LAT * cases, na.rm = TRUE) / total_cases,
    weighted_longitude_cases = sum(LON * cases, na.rm = TRUE) / total_cases
  )

covid_weighted_center_deaths <- covid_data_with_centroids %>%
  group_by(date) %>%
  summarise(
    total_deaths = sum(deaths, na.rm = TRUE),
    weighted_latitude_deaths = sum(LAT * deaths, na.rm = TRUE) / total_deaths,
    weighted_longitude_deaths = sum(LON * deaths, na.rm = TRUE) / total_deaths
  )

plot_cases <- ggplot(covid_weighted_center_cases, aes(x = weighted_longitude_cases, y = weighted_latitude_cases)) +
  geom_point(color = "red", size = 2, alpha = 0.7) +
  theme_minimal() +
  labs(title = "Weighted Mean Center of COVID-19 Cases", x = "Longitude", y = "Latitude")

plot_deaths <- ggplot(covid_weighted_center_deaths, aes(x = weighted_longitude_deaths, y = weighted_latitude_deaths)) +
  geom_point(color = "navy", size = 2, alpha = 0.7) +
  theme_minimal() +
  labs(title = "Weighted Mean Center of COVID-19 Deaths", x = "Longitude", y = "Latitude")

combined_plot <- plot_cases + plot_deaths

print(combined_plot)
```

```{r}
combined_plot <- plot_cases + plot_deaths

print(combined_plot)
```
